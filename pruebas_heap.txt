#include "heap.h"
#include "pa2mm.h"

int comparador(void* cosa_1, void* cosa_2){
    if(*(int*)cosa_1 > *(int*)cosa_2){
        return 1;
    }else if(*(int*)cosa_1 < *(int*)cosa_2){
        return -1;
    }else{
        return 0;
    }
}



// -------------------------- PRUEBAS HEAP -------------------------- //

void probar_crear_heap_vacio(){
    heap_t* heap_inicial = NULL;

    pa2m_afirmar((heap_inicial=heap_crear(comparador,NULL)) != NULL, "Puedo crear un heap");
    pa2m_afirmar(heap_vacio(heap_inicial) == true, "Esta vacio");
    pa2m_afirmar(heap_raiz(heap_inicial) == NULL, "Su inicio es NULL");
    pa2m_afirmar(heap_borrar_minimal(heap_inicial) == FALLA, "No se puede borrar minimal");

    heap_destruir(heap_inicial);
}


void probar_insertar_en_heap(){
    heap_t* heap_inicial = heap_crear(comparador,NULL);
    int cosa_1 = 10;
    int cosa_2 = 20;
    int cosa_3 = 30;

    pa2m_afirmar(heap_insertar(heap_inicial, &cosa_1) == EXITO, "Se inserta primer elemento");
    pa2m_afirmar(heap_vacio(heap_inicial) == false, "Ya no esta vacio");
    pa2m_afirmar(heap_insertar(heap_inicial, &cosa_2) == EXITO, "Se inserta segundo elemento");
    pa2m_afirmar(heap_elementos(heap_inicial) == 2, "Hay dos elementos");
    pa2m_afirmar(heap_raiz(heap_inicial) == &cosa_1, "La raiz es el menor elemento");
    pa2m_afirmar(heap_insertar(heap_inicial, &cosa_3) == EXITO, "Se inserta tercer elemento");
    pa2m_afirmar(heap_elementos(heap_inicial) == 3, "Hay tres elementos");
    pa2m_afirmar(heap_raiz(heap_inicial) == &cosa_1, "La raiz es el menor elemento");
    
    heap_destruir(heap_inicial);

}

int main(){
    

    pa2m_nuevo_grupo("PRUEBAS DE HEAP");
    probar_crear_heap_vacio();
    probar_insertar_en_heap();
    
    pa2m_mostrar_reporte();
}

